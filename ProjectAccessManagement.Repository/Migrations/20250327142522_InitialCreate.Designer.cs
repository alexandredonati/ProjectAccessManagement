// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectAccessManagement.Repository;

#nullable disable

namespace ProjectAccessManagement.Repository.Migrations
{
    [DbContext(typeof(ProjectAccessManagementContext))]
    [Migration("20250327142522_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AutomationCredentials", b =>
                {
                    b.Property<Guid>("AutomationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AutomationId", "CredentialId");

                    b.HasIndex("CredentialId");

                    b.ToTable("AutomationCredentials");
                });

            modelBuilder.Entity("AutomationModules", b =>
                {
                    b.Property<Guid>("AutomationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AutomationId", "ModuleId");

                    b.HasIndex("ModuleId");

                    b.ToTable("AutomationModules");
                });

            modelBuilder.Entity("CredentialModules", b =>
                {
                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CredentialId", "ModuleId");

                    b.HasIndex("ModuleId");

                    b.ToTable("CredentialModules");
                });

            modelBuilder.Entity("ProjectAccessManagement.Domain.Entities.App", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("ProjectAccessManagement.Domain.Entities.Automation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessAreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessAreaId");

                    b.ToTable("Automations");
                });

            modelBuilder.Entity("ProjectAccessManagement.Domain.Entities.BusinessArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BusinessAreas");
                });

            modelBuilder.Entity("ProjectAccessManagement.Domain.Entities.Credential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowsMultiAccess")
                        .HasColumnType("bit");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CredentialType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("ProjectAccessManagement.Domain.Entities.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("AutomationCredentials", b =>
                {
                    b.HasOne("ProjectAccessManagement.Domain.Entities.Automation", null)
                        .WithMany()
                        .HasForeignKey("AutomationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjectAccessManagement.Domain.Entities.Credential", null)
                        .WithMany()
                        .HasForeignKey("CredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AutomationModules", b =>
                {
                    b.HasOne("ProjectAccessManagement.Domain.Entities.Automation", null)
                        .WithMany()
                        .HasForeignKey("AutomationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjectAccessManagement.Domain.Entities.Module", null)
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CredentialModules", b =>
                {
                    b.HasOne("ProjectAccessManagement.Domain.Entities.Credential", null)
                        .WithMany()
                        .HasForeignKey("CredentialId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjectAccessManagement.Domain.Entities.Module", null)
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectAccessManagement.Domain.Entities.Automation", b =>
                {
                    b.HasOne("ProjectAccessManagement.Domain.Entities.BusinessArea", "BusinessArea")
                        .WithMany("Automations")
                        .HasForeignKey("BusinessAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessArea");
                });

            modelBuilder.Entity("ProjectAccessManagement.Domain.Entities.Credential", b =>
                {
                    b.HasOne("ProjectAccessManagement.Domain.Entities.App", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("ProjectAccessManagement.Domain.Entities.Module", b =>
                {
                    b.HasOne("ProjectAccessManagement.Domain.Entities.App", "Application")
                        .WithMany("Modules")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("ProjectAccessManagement.Domain.Entities.App", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("ProjectAccessManagement.Domain.Entities.BusinessArea", b =>
                {
                    b.Navigation("Automations");
                });
#pragma warning restore 612, 618
        }
    }
}
